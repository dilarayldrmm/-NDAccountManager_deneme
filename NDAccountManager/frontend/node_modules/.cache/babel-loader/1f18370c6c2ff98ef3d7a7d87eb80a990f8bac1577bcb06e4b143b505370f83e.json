{"ast":null,"code":"/*! @azure/msal-browser v4.18.0 2025-07-30 */\n'use strict';\n\nimport { PerformanceEvents, invokeAsync, ProtocolMode, HttpMethod, createClientConfigurationError, ClientConfigurationErrorCodes, AuthenticationScheme, StringUtils } from '@azure/msal-common/browser';\nimport { hashString } from '../crypto/BrowserCrypto.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Initializer function for all request APIs\r\n * @param request\r\n */\nasync function initializeBaseRequest(request, config, performanceClient, logger) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n  const authority = request.authority || config.auth.authority;\n  const scopes = [...(request && request.scopes || [])];\n  const validatedRequest = {\n    ...request,\n    correlationId: request.correlationId,\n    authority,\n    scopes\n  };\n  // Set authenticationScheme to BEARER if not explicitly set in the request\n  if (!validatedRequest.authenticationScheme) {\n    validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n    logger.verbose('Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request');\n  } else {\n    if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n      if (!request.sshJwk) {\n        throw createClientConfigurationError(ClientConfigurationErrorCodes.missingSshJwk);\n      }\n      if (!request.sshKid) {\n        throw createClientConfigurationError(ClientConfigurationErrorCodes.missingSshKid);\n      }\n    }\n    logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n  }\n  // Set requested claims hash if claims-based caching is enabled and claims were requested\n  if (config.cache.claimsBasedCachingEnabled && request.claims &&\n  // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n  !StringUtils.isEmptyObj(request.claims)) {\n    validatedRequest.requestedClaimsHash = await hashString(request.claims);\n  }\n  return validatedRequest;\n}\nasync function initializeSilentRequest(request, account, config, performanceClient, logger) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, request.correlationId);\n  const baseRequest = await invokeAsync(initializeBaseRequest, PerformanceEvents.InitializeBaseRequest, logger, performanceClient, request.correlationId)(request, config, performanceClient, logger);\n  return {\n    ...request,\n    ...baseRequest,\n    account: account,\n    forceRefresh: request.forceRefresh || false\n  };\n}\n/**\r\n * Validates that the combination of request method, protocol mode and authorize body parameters is correct.\r\n * Returns the validated or defaulted HTTP method or throws if the configured combination is invalid.\r\n * @param interactionRequest\r\n * @param protocolMode\r\n * @returns\r\n */\nfunction validateRequestMethod(interactionRequest, protocolMode) {\n  let httpMethod;\n  const requestMethod = interactionRequest.httpMethod;\n  if (protocolMode === ProtocolMode.EAR) {\n    // Don't override httpMethod if it is already set, default to POST if not set\n    httpMethod = requestMethod || HttpMethod.POST;\n    // Validate that method is not GET if protocol mode is EAR\n    if (httpMethod !== HttpMethod.POST) {\n      throw createClientConfigurationError(ClientConfigurationErrorCodes.invalidRequestMethodForEAR);\n    }\n  } else {\n    // For non-EAR protocol modes, default to GET if httpMethod is not set\n    httpMethod = requestMethod || HttpMethod.GET;\n  }\n  // Regardless of protocolMode, if there are authorizePostBodyParameters, validate the request method is POST\n  if (interactionRequest.authorizePostBodyParameters && httpMethod !== HttpMethod.POST) {\n    throw createClientConfigurationError(ClientConfigurationErrorCodes.invalidAuthorizePostBodyParameters);\n  }\n  return httpMethod;\n}\nexport { initializeBaseRequest, initializeSilentRequest, validateRequestMethod };","map":{"version":3,"names":["initializeBaseRequest","request","config","performanceClient","logger","addQueueMeasurement","PerformanceEvents","InitializeBaseRequest","correlationId","authority","auth","scopes","validatedRequest","authenticationScheme","AuthenticationScheme","BEARER","verbose","SSH","sshJwk","createClientConfigurationError","ClientConfigurationErrorCodes","missingSshJwk","sshKid","missingSshKid","cache","claimsBasedCachingEnabled","claims","StringUtils","isEmptyObj","requestedClaimsHash","hashString","initializeSilentRequest","account","InitializeSilentRequest","baseRequest","invokeAsync","forceRefresh","validateRequestMethod","interactionRequest","protocolMode","httpMethod","requestMethod","ProtocolMode","EAR","HttpMethod","POST","invalidRequestMethodForEAR","GET","authorizePostBodyParameters","invalidAuthorizePostBodyParameters"],"sources":["/Users/dilarayildirim/Desktop/deneme/NDAccountManager/frontend/node_modules/@azure/msal-browser/src/request/RequestHelpers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountInfo,\n    AuthenticationScheme,\n    BaseAuthRequest,\n    ClientConfigurationErrorCodes,\n    CommonSilentFlowRequest,\n    HttpMethod,\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n    ProtocolMode,\n    StringUtils,\n    createClientConfigurationError,\n    invokeAsync,\n} from \"@azure/msal-common/browser\";\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\nimport { SilentRequest } from \"./SilentRequest.js\";\nimport { hashString } from \"../crypto/BrowserCrypto.js\";\nimport { PopupRequest } from \"./PopupRequest.js\";\nimport { RedirectRequest } from \"./RedirectRequest.js\";\n\n/**\n * Initializer function for all request APIs\n * @param request\n */\nexport async function initializeBaseRequest(\n    request: Partial<BaseAuthRequest> & { correlationId: string },\n    config: BrowserConfiguration,\n    performanceClient: IPerformanceClient,\n    logger: Logger\n): Promise<BaseAuthRequest> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.InitializeBaseRequest,\n        request.correlationId\n    );\n    const authority = request.authority || config.auth.authority;\n\n    const scopes = [...((request && request.scopes) || [])];\n\n    const validatedRequest: BaseAuthRequest = {\n        ...request,\n        correlationId: request.correlationId,\n        authority,\n        scopes,\n    };\n\n    // Set authenticationScheme to BEARER if not explicitly set in the request\n    if (!validatedRequest.authenticationScheme) {\n        validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n        logger.verbose(\n            'Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request'\n        );\n    } else {\n        if (\n            validatedRequest.authenticationScheme === AuthenticationScheme.SSH\n        ) {\n            if (!request.sshJwk) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshJwk\n                );\n            }\n            if (!request.sshKid) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshKid\n                );\n            }\n        }\n        logger.verbose(\n            `Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`\n        );\n    }\n\n    // Set requested claims hash if claims-based caching is enabled and claims were requested\n    if (\n        config.cache.claimsBasedCachingEnabled &&\n        request.claims &&\n        // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n        !StringUtils.isEmptyObj(request.claims)\n    ) {\n        validatedRequest.requestedClaimsHash = await hashString(request.claims);\n    }\n\n    return validatedRequest;\n}\n\nexport async function initializeSilentRequest(\n    request: SilentRequest & { correlationId: string },\n    account: AccountInfo,\n    config: BrowserConfiguration,\n    performanceClient: IPerformanceClient,\n    logger: Logger\n): Promise<CommonSilentFlowRequest> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.InitializeSilentRequest,\n        request.correlationId\n    );\n\n    const baseRequest = await invokeAsync(\n        initializeBaseRequest,\n        PerformanceEvents.InitializeBaseRequest,\n        logger,\n        performanceClient,\n        request.correlationId\n    )(request, config, performanceClient, logger);\n    return {\n        ...request,\n        ...baseRequest,\n        account: account,\n        forceRefresh: request.forceRefresh || false,\n    };\n}\n\n/**\n * Validates that the combination of request method, protocol mode and authorize body parameters is correct.\n * Returns the validated or defaulted HTTP method or throws if the configured combination is invalid.\n * @param interactionRequest\n * @param protocolMode\n * @returns\n */\nexport function validateRequestMethod(\n    interactionRequest: BaseAuthRequest | PopupRequest | RedirectRequest,\n    protocolMode: ProtocolMode\n): HttpMethod {\n    let httpMethod: HttpMethod | undefined;\n    const requestMethod = interactionRequest.httpMethod;\n\n    if (protocolMode === ProtocolMode.EAR) {\n        // Don't override httpMethod if it is already set, default to POST if not set\n        httpMethod = requestMethod || HttpMethod.POST;\n        // Validate that method is not GET if protocol mode is EAR\n        if (httpMethod !== HttpMethod.POST) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidRequestMethodForEAR\n            );\n        }\n    } else {\n        // For non-EAR protocol modes, default to GET if httpMethod is not set\n        httpMethod = requestMethod || HttpMethod.GET;\n    }\n\n    // Regardless of protocolMode, if there are authorizePostBodyParameters, validate the request method is POST\n    if (\n        interactionRequest.authorizePostBodyParameters &&\n        httpMethod !== HttpMethod.POST\n    ) {\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.invalidAuthorizePostBodyParameters\n        );\n    }\n\n    return httpMethod;\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;AAuBH;;;AAGG;AACI,eAAeA,qBAAqBA,CACvCC,OAA6D,EAC7DC,MAA4B,EAC5BC,iBAAqC,EACrCC,MAAc;EAEdD,iBAAiB,CAACE,mBAAmB,CACjCC,iBAAiB,CAACC,qBAAqB,EACvCN,OAAO,CAACO,aAAa,CACxB;EACD,MAAMC,SAAS,GAAGR,OAAO,CAACQ,SAAS,IAAIP,MAAM,CAACQ,IAAI,CAACD,SAAS;EAE5D,MAAME,MAAM,GAAG,CAAC,IAAKV,OAAO,IAAIA,OAAO,CAACU,MAAM,IAAK,EAAE,CAAC,CAAC;EAEvD,MAAMC,gBAAgB,GAAoB;IACtC,GAAGX,OAAO;IACVO,aAAa,EAAEP,OAAO,CAACO,aAAa;IACpCC,SAAS;IACTE;GACH;;EAGD,IAAI,CAACC,gBAAgB,CAACC,oBAAoB,EAAE;IACxCD,gBAAgB,CAACC,oBAAoB,GAAGC,oBAAoB,CAACC,MAAM;IACnEX,MAAM,CAACY,OAAO,CACV,yFAAyF,CAC5F;EACJ,OAAM;IACH,IACIJ,gBAAgB,CAACC,oBAAoB,KAAKC,oBAAoB,CAACG,GAAG,EACpE;MACE,IAAI,CAAChB,OAAO,CAACiB,MAAM,EAAE;QACjB,MAAMC,8BAA8B,CAChCC,6BAA6B,CAACC,aAAa,CAC9C;MACJ;MACD,IAAI,CAACpB,OAAO,CAACqB,MAAM,EAAE;QACjB,MAAMH,8BAA8B,CAChCC,6BAA6B,CAACG,aAAa,CAC9C;MACJ;IACJ;IACDnB,MAAM,CAACY,OAAO,CACV,iCAAiCJ,gBAAgB,CAACC,oBAAoB,iCAAiC,CAC1G;EACJ;;EAGD,IACIX,MAAM,CAACsB,KAAK,CAACC,yBAAyB,IACtCxB,OAAO,CAACyB,MAAM;;EAEd,CAACC,WAAW,CAACC,UAAU,CAAC3B,OAAO,CAACyB,MAAM,CAAC,EACzC;IACEd,gBAAgB,CAACiB,mBAAmB,GAAG,MAAMC,UAAU,CAAC7B,OAAO,CAACyB,MAAM,CAAC;EAC1E;EAED,OAAOd,gBAAgB;AAC3B;AAEO,eAAemB,uBAAuBA,CACzC9B,OAAkD,EAClD+B,OAAoB,EACpB9B,MAA4B,EAC5BC,iBAAqC,EACrCC,MAAc;EAEdD,iBAAiB,CAACE,mBAAmB,CACjCC,iBAAiB,CAAC2B,uBAAuB,EACzChC,OAAO,CAACO,aAAa,CACxB;EAED,MAAM0B,WAAW,GAAG,MAAMC,WAAW,CACjCnC,qBAAqB,EACrBM,iBAAiB,CAACC,qBAAqB,EACvCH,MAAM,EACND,iBAAiB,EACjBF,OAAO,CAACO,aAAa,CACxB,CAACP,OAAO,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,MAAM,CAAC;EAC7C,OAAO;IACH,GAAGH,OAAO;IACV,GAAGiC,WAAW;IACdF,OAAO,EAAEA,OAAO;IAChBI,YAAY,EAAEnC,OAAO,CAACmC,YAAY,IAAI;GACzC;AACL;AAEA;;;;;;AAMG;AACa,SAAAC,qBAAqBA,CACjCC,kBAAoE,EACpEC,YAA0B;EAE1B,IAAIC,UAAkC;EACtC,MAAMC,aAAa,GAAGH,kBAAkB,CAACE,UAAU;EAEnD,IAAID,YAAY,KAAKG,YAAY,CAACC,GAAG,EAAE;;IAEnCH,UAAU,GAAGC,aAAa,IAAIG,UAAU,CAACC,IAAI;;IAE7C,IAAIL,UAAU,KAAKI,UAAU,CAACC,IAAI,EAAE;MAChC,MAAM1B,8BAA8B,CAChCC,6BAA6B,CAAC0B,0BAA0B,CAC3D;IACJ;EACJ,OAAM;;IAEHN,UAAU,GAAGC,aAAa,IAAIG,UAAU,CAACG,GAAG;EAC/C;;EAGD,IACIT,kBAAkB,CAACU,2BAA2B,IAC9CR,UAAU,KAAKI,UAAU,CAACC,IAAI,EAChC;IACE,MAAM1B,8BAA8B,CAChCC,6BAA6B,CAAC6B,kCAAkC,CACnE;EACJ;EAED,OAAOT,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
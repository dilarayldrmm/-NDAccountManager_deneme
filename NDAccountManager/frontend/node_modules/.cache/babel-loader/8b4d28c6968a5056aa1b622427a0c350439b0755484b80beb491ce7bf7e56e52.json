{"ast":null,"code":"/*! @azure/msal-common v15.9.0 2025-07-23 */\n'use strict';\n\nimport { AuthError } from './AuthError.mjs';\nimport { invalidRequestMethodForEAR, invalidAuthorizePostBodyParameters, authorityMismatch, cannotAllowPlatformBroker, cannotSetOIDCOptions, invalidAuthenticationHeader, missingNonceAuthenticationHeader, missingSshKid, missingSshJwk, untrustedAuthority, invalidAuthorityMetadata, invalidCloudDiscoveryMetadata, pkceParamsMissing, invalidCodeChallengeMethod, logoutRequestEmpty, tokenRequestEmpty, invalidClaims, emptyInputScopesError, urlEmptyError, urlParseError, authorityUriInsecure, claimsRequestParsingError, redirectUriEmpty } from './ClientConfigurationErrorCodes.mjs';\nimport * as ClientConfigurationErrorCodes from './ClientConfigurationErrorCodes.mjs';\nexport { ClientConfigurationErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst ClientConfigurationErrorMessages = {\n  [redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\n  [claimsRequestParsingError]: \"Could not parse the given claims request object.\",\n  [authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n  [urlParseError]: \"URL could not be parsed into appropriate segments.\",\n  [urlEmptyError]: \"URL was empty or null.\",\n  [emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n  [invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\n  [tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\n  [logoutRequestEmpty]: \"The logout request was null or undefined.\",\n  [invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n  [pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n  [invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n  [invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n  [untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n  [missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n  [missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n  [missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n  [invalidAuthenticationHeader]: \"Invalid authentication header provided\",\n  [cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n  [cannotAllowPlatformBroker]: \"Cannot set allowPlatformBroker parameter to true when not in AAD protocol mode.\",\n  [authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\n  [invalidAuthorizePostBodyParameters]: \"Invalid authorize post body parameters provided. If you are using authorizePostBodyParameters, the request method must be POST. Please check the request method and parameters.\",\n  [invalidRequestMethodForEAR]: \"Invalid request method for EAR protocol mode. The request method cannot be GET when using EAR protocol mode. Please change the request method to POST.\"\n};\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */\nconst ClientConfigurationErrorMessage = {\n  redirectUriNotSet: {\n    code: redirectUriEmpty,\n    desc: ClientConfigurationErrorMessages[redirectUriEmpty]\n  },\n  claimsRequestParsingError: {\n    code: claimsRequestParsingError,\n    desc: ClientConfigurationErrorMessages[claimsRequestParsingError]\n  },\n  authorityUriInsecure: {\n    code: authorityUriInsecure,\n    desc: ClientConfigurationErrorMessages[authorityUriInsecure]\n  },\n  urlParseError: {\n    code: urlParseError,\n    desc: ClientConfigurationErrorMessages[urlParseError]\n  },\n  urlEmptyError: {\n    code: urlEmptyError,\n    desc: ClientConfigurationErrorMessages[urlEmptyError]\n  },\n  emptyScopesError: {\n    code: emptyInputScopesError,\n    desc: ClientConfigurationErrorMessages[emptyInputScopesError]\n  },\n  invalidClaimsRequest: {\n    code: invalidClaims,\n    desc: ClientConfigurationErrorMessages[invalidClaims]\n  },\n  tokenRequestEmptyError: {\n    code: tokenRequestEmpty,\n    desc: ClientConfigurationErrorMessages[tokenRequestEmpty]\n  },\n  logoutRequestEmptyError: {\n    code: logoutRequestEmpty,\n    desc: ClientConfigurationErrorMessages[logoutRequestEmpty]\n  },\n  invalidCodeChallengeMethod: {\n    code: invalidCodeChallengeMethod,\n    desc: ClientConfigurationErrorMessages[invalidCodeChallengeMethod]\n  },\n  invalidCodeChallengeParams: {\n    code: pkceParamsMissing,\n    desc: ClientConfigurationErrorMessages[pkceParamsMissing]\n  },\n  invalidCloudDiscoveryMetadata: {\n    code: invalidCloudDiscoveryMetadata,\n    desc: ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata]\n  },\n  invalidAuthorityMetadata: {\n    code: invalidAuthorityMetadata,\n    desc: ClientConfigurationErrorMessages[invalidAuthorityMetadata]\n  },\n  untrustedAuthority: {\n    code: untrustedAuthority,\n    desc: ClientConfigurationErrorMessages[untrustedAuthority]\n  },\n  missingSshJwk: {\n    code: missingSshJwk,\n    desc: ClientConfigurationErrorMessages[missingSshJwk]\n  },\n  missingSshKid: {\n    code: missingSshKid,\n    desc: ClientConfigurationErrorMessages[missingSshKid]\n  },\n  missingNonceAuthenticationHeader: {\n    code: missingNonceAuthenticationHeader,\n    desc: ClientConfigurationErrorMessages[missingNonceAuthenticationHeader]\n  },\n  invalidAuthenticationHeader: {\n    code: invalidAuthenticationHeader,\n    desc: ClientConfigurationErrorMessages[invalidAuthenticationHeader]\n  },\n  cannotSetOIDCOptions: {\n    code: cannotSetOIDCOptions,\n    desc: ClientConfigurationErrorMessages[cannotSetOIDCOptions]\n  },\n  cannotAllowPlatformBroker: {\n    code: cannotAllowPlatformBroker,\n    desc: ClientConfigurationErrorMessages[cannotAllowPlatformBroker]\n  },\n  authorityMismatch: {\n    code: authorityMismatch,\n    desc: ClientConfigurationErrorMessages[authorityMismatch]\n  },\n  invalidAuthorizePostBodyParameters: {\n    code: invalidAuthorizePostBodyParameters,\n    desc: ClientConfigurationErrorMessages[invalidAuthorizePostBodyParameters]\n  },\n  invalidRequestMethodForEAR: {\n    code: invalidRequestMethodForEAR,\n    desc: ClientConfigurationErrorMessages[invalidRequestMethodForEAR]\n  }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\nclass ClientConfigurationError extends AuthError {\n  constructor(errorCode) {\n    super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n    this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n  }\n}\nfunction createClientConfigurationError(errorCode) {\n  return new ClientConfigurationError(errorCode);\n}\nexport { ClientConfigurationError, ClientConfigurationErrorMessage, ClientConfigurationErrorMessages, createClientConfigurationError };","map":{"version":3,"names":["ClientConfigurationErrorMessages","redirectUriEmpty","claimsRequestParsingError","authorityUriInsecure","urlParseError","urlEmptyError","emptyInputScopesError","invalidClaims","tokenRequestEmpty","logoutRequestEmpty","invalidCodeChallengeMethod","pkceParamsMissing","invalidCloudDiscoveryMetadata","invalidAuthorityMetadata","untrustedAuthority","missingSshJwk","missingSshKid","missingNonceAuthenticationHeader","invalidAuthenticationHeader","cannotSetOIDCOptions","cannotAllowPlatformBroker","authorityMismatch","invalidAuthorizePostBodyParameters","invalidRequestMethodForEAR","ClientConfigurationErrorMessage","redirectUriNotSet","code","desc","emptyScopesError","invalidClaimsRequest","tokenRequestEmptyError","logoutRequestEmptyError","invalidCodeChallengeParams","ClientConfigurationError","AuthError","constructor","errorCode","name","Object","setPrototypeOf","prototype","createClientConfigurationError"],"sources":["/Users/dilarayildirim/Desktop/deneme/NDAccountManager/frontend/node_modules/@azure/msal-common/src/error/ClientConfigurationError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError.js\";\nimport * as ClientConfigurationErrorCodes from \"./ClientConfigurationErrorCodes.js\";\nexport { ClientConfigurationErrorCodes };\n\nexport const ClientConfigurationErrorMessages = {\n    [ClientConfigurationErrorCodes.redirectUriEmpty]:\n        \"A redirect URI is required for all calls, and none has been set.\",\n    [ClientConfigurationErrorCodes.claimsRequestParsingError]:\n        \"Could not parse the given claims request object.\",\n    [ClientConfigurationErrorCodes.authorityUriInsecure]:\n        \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    [ClientConfigurationErrorCodes.urlParseError]:\n        \"URL could not be parsed into appropriate segments.\",\n    [ClientConfigurationErrorCodes.urlEmptyError]: \"URL was empty or null.\",\n    [ClientConfigurationErrorCodes.emptyInputScopesError]:\n        \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    [ClientConfigurationErrorCodes.invalidClaims]:\n        \"Given claims parameter must be a stringified JSON object.\",\n    [ClientConfigurationErrorCodes.tokenRequestEmpty]:\n        \"Token request was empty and not found in cache.\",\n    [ClientConfigurationErrorCodes.logoutRequestEmpty]:\n        \"The logout request was null or undefined.\",\n    [ClientConfigurationErrorCodes.invalidCodeChallengeMethod]:\n        'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    [ClientConfigurationErrorCodes.pkceParamsMissing]:\n        \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    [ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata]:\n        \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    [ClientConfigurationErrorCodes.invalidAuthorityMetadata]:\n        \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    [ClientConfigurationErrorCodes.untrustedAuthority]:\n        \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    [ClientConfigurationErrorCodes.missingSshJwk]:\n        \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    [ClientConfigurationErrorCodes.missingSshKid]:\n        \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    [ClientConfigurationErrorCodes.missingNonceAuthenticationHeader]:\n        \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    [ClientConfigurationErrorCodes.invalidAuthenticationHeader]:\n        \"Invalid authentication header provided\",\n    [ClientConfigurationErrorCodes.cannotSetOIDCOptions]:\n        \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    [ClientConfigurationErrorCodes.cannotAllowPlatformBroker]:\n        \"Cannot set allowPlatformBroker parameter to true when not in AAD protocol mode.\",\n    [ClientConfigurationErrorCodes.authorityMismatch]:\n        \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\n    [ClientConfigurationErrorCodes.invalidAuthorizePostBodyParameters]:\n        \"Invalid authorize post body parameters provided. If you are using authorizePostBodyParameters, the request method must be POST. Please check the request method and parameters.\",\n    [ClientConfigurationErrorCodes.invalidRequestMethodForEAR]:\n        \"Invalid request method for EAR protocol mode. The request method cannot be GET when using EAR protocol mode. Please change the request method to POST.\",\n};\n\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use ClientConfigurationErrorCodes instead\n */\nexport const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: ClientConfigurationErrorCodes.redirectUriEmpty,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.redirectUriEmpty\n        ],\n    },\n    claimsRequestParsingError: {\n        code: ClientConfigurationErrorCodes.claimsRequestParsingError,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.claimsRequestParsingError\n        ],\n    },\n    authorityUriInsecure: {\n        code: ClientConfigurationErrorCodes.authorityUriInsecure,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.authorityUriInsecure\n        ],\n    },\n    urlParseError: {\n        code: ClientConfigurationErrorCodes.urlParseError,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.urlParseError\n        ],\n    },\n    urlEmptyError: {\n        code: ClientConfigurationErrorCodes.urlEmptyError,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.urlEmptyError\n        ],\n    },\n    emptyScopesError: {\n        code: ClientConfigurationErrorCodes.emptyInputScopesError,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.emptyInputScopesError\n        ],\n    },\n    invalidClaimsRequest: {\n        code: ClientConfigurationErrorCodes.invalidClaims,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidClaims\n        ],\n    },\n    tokenRequestEmptyError: {\n        code: ClientConfigurationErrorCodes.tokenRequestEmpty,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.tokenRequestEmpty\n        ],\n    },\n    logoutRequestEmptyError: {\n        code: ClientConfigurationErrorCodes.logoutRequestEmpty,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.logoutRequestEmpty\n        ],\n    },\n    invalidCodeChallengeMethod: {\n        code: ClientConfigurationErrorCodes.invalidCodeChallengeMethod,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidCodeChallengeMethod\n        ],\n    },\n    invalidCodeChallengeParams: {\n        code: ClientConfigurationErrorCodes.pkceParamsMissing,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.pkceParamsMissing\n        ],\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata\n        ],\n    },\n    invalidAuthorityMetadata: {\n        code: ClientConfigurationErrorCodes.invalidAuthorityMetadata,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidAuthorityMetadata\n        ],\n    },\n    untrustedAuthority: {\n        code: ClientConfigurationErrorCodes.untrustedAuthority,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.untrustedAuthority\n        ],\n    },\n    missingSshJwk: {\n        code: ClientConfigurationErrorCodes.missingSshJwk,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.missingSshJwk\n        ],\n    },\n    missingSshKid: {\n        code: ClientConfigurationErrorCodes.missingSshKid,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.missingSshKid\n        ],\n    },\n    missingNonceAuthenticationHeader: {\n        code: ClientConfigurationErrorCodes.missingNonceAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.missingNonceAuthenticationHeader\n        ],\n    },\n    invalidAuthenticationHeader: {\n        code: ClientConfigurationErrorCodes.invalidAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidAuthenticationHeader\n        ],\n    },\n    cannotSetOIDCOptions: {\n        code: ClientConfigurationErrorCodes.cannotSetOIDCOptions,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.cannotSetOIDCOptions\n        ],\n    },\n    cannotAllowPlatformBroker: {\n        code: ClientConfigurationErrorCodes.cannotAllowPlatformBroker,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.cannotAllowPlatformBroker\n        ],\n    },\n    authorityMismatch: {\n        code: ClientConfigurationErrorCodes.authorityMismatch,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.authorityMismatch\n        ],\n    },\n    invalidAuthorizePostBodyParameters: {\n        code: ClientConfigurationErrorCodes.invalidAuthorizePostBodyParameters,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidAuthorizePostBodyParameters\n        ],\n    },\n    invalidRequestMethodForEAR: {\n        code: ClientConfigurationErrorCodes.invalidRequestMethodForEAR,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidRequestMethodForEAR\n        ],\n    },\n};\n\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nexport class ClientConfigurationError extends AuthError {\n    constructor(errorCode: string) {\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n}\n\nexport function createClientConfigurationError(\n    errorCode: string\n): ClientConfigurationError {\n    return new ClientConfigurationError(errorCode);\n}\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAMU,MAAAA,gCAAgC,GAAG;EAC5C,CAACC,gBAA8C,GAC3C,kEAAkE;EACtE,CAACC,yBAAuD,GACpD,kDAAkD;EACtD,CAACC,oBAAkD,GAC/C,2NAA2N;EAC/N,CAACC,aAA2C,GACxC,oDAAoD;EACxD,CAACC,aAA2C,GAAG,wBAAwB;EACvE,CAACC,qBAAmD,GAChD,gHAAgH;EACpH,CAACC,aAA2C,GACxC,2DAA2D;EAC/D,CAACC,iBAA+C,GAC5C,iDAAiD;EACrD,CAACC,kBAAgD,GAC7C,2CAA2C;EAC/C,CAACC,0BAAwD,GACrD,+EAA+E;EACnF,CAACC,iBAA+C,GAC5C,qGAAqG;EACzG,CAACC,6BAA2D,GACxD,qIAAqI;EACzI,CAACC,wBAAsD,GACnD,yIAAyI;EAC7I,CAACC,kBAAgD,GAC7C,4HAA4H;EAChI,CAACC,aAA2C,GACxC,6HAA6H;EACjI,CAACC,aAA2C,GACxC,uJAAuJ;EAC3J,CAACC,gCAA8D,GAC3D,gLAAgL;EACpL,CAACC,2BAAyD,GACtD,wCAAwC;EAC5C,CAACC,oBAAkD,GAC/C,6GAA6G;EACjH,CAACC,yBAAuD,GACpD,iFAAiF;EACrF,CAACC,iBAA+C,GAC5C,kPAAkP;EACtP,CAACC,kCAAgE,GAC7D,iLAAiL;EACrL,CAACC,0BAAwD,GACrD;;AAGR;;;AAGG;AACU,MAAAC,+BAA+B,GAAG;EAC3CC,iBAAiB,EAAE;IACfC,IAAI,EAAEzB,gBAA8C;IACpD0B,IAAI,EAAE3B,gCAAgC,CAClCC,gBAA8C;EAErD;EACDC,yBAAyB,EAAE;IACvBwB,IAAI,EAAExB,yBAAuD;IAC7DyB,IAAI,EAAE3B,gCAAgC,CAClCE,yBAAuD;EAE9D;EACDC,oBAAoB,EAAE;IAClBuB,IAAI,EAAEvB,oBAAkD;IACxDwB,IAAI,EAAE3B,gCAAgC,CAClCG,oBAAkD;EAEzD;EACDC,aAAa,EAAE;IACXsB,IAAI,EAAEtB,aAA2C;IACjDuB,IAAI,EAAE3B,gCAAgC,CAClCI,aAA2C;EAElD;EACDC,aAAa,EAAE;IACXqB,IAAI,EAAErB,aAA2C;IACjDsB,IAAI,EAAE3B,gCAAgC,CAClCK,aAA2C;EAElD;EACDuB,gBAAgB,EAAE;IACdF,IAAI,EAAEpB,qBAAmD;IACzDqB,IAAI,EAAE3B,gCAAgC,CAClCM,qBAAmD;EAE1D;EACDuB,oBAAoB,EAAE;IAClBH,IAAI,EAAEnB,aAA2C;IACjDoB,IAAI,EAAE3B,gCAAgC,CAClCO,aAA2C;EAElD;EACDuB,sBAAsB,EAAE;IACpBJ,IAAI,EAAElB,iBAA+C;IACrDmB,IAAI,EAAE3B,gCAAgC,CAClCQ,iBAA+C;EAEtD;EACDuB,uBAAuB,EAAE;IACrBL,IAAI,EAAEjB,kBAAgD;IACtDkB,IAAI,EAAE3B,gCAAgC,CAClCS,kBAAgD;EAEvD;EACDC,0BAA0B,EAAE;IACxBgB,IAAI,EAAEhB,0BAAwD;IAC9DiB,IAAI,EAAE3B,gCAAgC,CAClCU,0BAAwD;EAE/D;EACDsB,0BAA0B,EAAE;IACxBN,IAAI,EAAEf,iBAA+C;IACrDgB,IAAI,EAAE3B,gCAAgC,CAClCW,iBAA+C;EAEtD;EACDC,6BAA6B,EAAE;IAC3Bc,IAAI,EAAEd,6BAA2D;IACjEe,IAAI,EAAE3B,gCAAgC,CAClCY,6BAA2D;EAElE;EACDC,wBAAwB,EAAE;IACtBa,IAAI,EAAEb,wBAAsD;IAC5Dc,IAAI,EAAE3B,gCAAgC,CAClCa,wBAAsD;EAE7D;EACDC,kBAAkB,EAAE;IAChBY,IAAI,EAAEZ,kBAAgD;IACtDa,IAAI,EAAE3B,gCAAgC,CAClCc,kBAAgD;EAEvD;EACDC,aAAa,EAAE;IACXW,IAAI,EAAEX,aAA2C;IACjDY,IAAI,EAAE3B,gCAAgC,CAClCe,aAA2C;EAElD;EACDC,aAAa,EAAE;IACXU,IAAI,EAAEV,aAA2C;IACjDW,IAAI,EAAE3B,gCAAgC,CAClCgB,aAA2C;EAElD;EACDC,gCAAgC,EAAE;IAC9BS,IAAI,EAAET,gCAA8D;IACpEU,IAAI,EAAE3B,gCAAgC,CAClCiB,gCAA8D;EAErE;EACDC,2BAA2B,EAAE;IACzBQ,IAAI,EAAER,2BAAyD;IAC/DS,IAAI,EAAE3B,gCAAgC,CAClCkB,2BAAyD;EAEhE;EACDC,oBAAoB,EAAE;IAClBO,IAAI,EAAEP,oBAAkD;IACxDQ,IAAI,EAAE3B,gCAAgC,CAClCmB,oBAAkD;EAEzD;EACDC,yBAAyB,EAAE;IACvBM,IAAI,EAAEN,yBAAuD;IAC7DO,IAAI,EAAE3B,gCAAgC,CAClCoB,yBAAuD;EAE9D;EACDC,iBAAiB,EAAE;IACfK,IAAI,EAAEL,iBAA+C;IACrDM,IAAI,EAAE3B,gCAAgC,CAClCqB,iBAA+C;EAEtD;EACDC,kCAAkC,EAAE;IAChCI,IAAI,EAAEJ,kCAAgE;IACtEK,IAAI,EAAE3B,gCAAgC,CAClCsB,kCAAgE;EAEvE;EACDC,0BAA0B,EAAE;IACxBG,IAAI,EAAEH,0BAAwD;IAC9DI,IAAI,EAAE3B,gCAAgC,CAClCuB,0BAAwD;EAE/D;;AAGL;;AAEG;AACG,MAAOU,wBAAyB,SAAQC,SAAS;EACnDC,YAAYC,SAAiB;IACzB,KAAK,CAACA,SAAS,EAAEpC,gCAAgC,CAACoC,SAAS,CAAC,CAAC;IAC7D,IAAI,CAACC,IAAI,GAAG,0BAA0B;IACtCC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEN,wBAAwB,CAACO,SAAS,CAAC;;AAEtE;AAEK,SAAUC,8BAA8BA,CAC1CL,SAAiB;EAEjB,OAAO,IAAIH,wBAAwB,CAACG,SAAS,CAAC;AAClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}